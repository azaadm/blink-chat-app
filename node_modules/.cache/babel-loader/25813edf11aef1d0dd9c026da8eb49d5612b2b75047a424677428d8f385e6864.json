{"ast":null,"code":"var _jsxFileName = \"/Users/AZAAD/json-conversation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/jsonData/chatHistory.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables\n  const [conversations, setConversations] = useState(sampleData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(conv => conv.id === selectedConversationId);\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      // Validate that a conversation is selected\n      if (!selectedConversationId) {\n        throw new Error(\"Please select a conversation.\");\n      }\n\n      // Validate that the message is not empty\n      if (newMessage.trim() === \"\") {\n        throw new Error(\"Message cannot be empty.\");\n      }\n\n      // Update conversations using the previous state\n      setConversations(prevConversations => {\n        // Map over each conversation\n        const updatedConversations = prevConversations.map(conv => {\n          // Check if the current conversation is the selected one\n          if (conv.id === selectedConversationId) {\n            // Update the messages for the selected conversation\n            const updatedMessages = editMode ? conv.messages.map(msg => msg.id === editMessageId ? {\n              ...msg,\n              text: newMessage,\n              last_updated: moment().toISOString()\n            } : msg) : [...conv.messages, {\n              id: conv.messages.length + 1,\n              text: newMessage,\n              last_updated: moment().toISOString()\n            }];\n\n            // Return the updated conversation with the new messages\n            return {\n              ...conv,\n              messages: updatedMessages,\n              last_updated: moment().toISOString()\n            };\n          }\n          // If it's not the selected conversation, return the unchanged conversation\n          return conv;\n        });\n\n        // Return the updated conversations to setConversations\n        return updatedConversations;\n      });\n\n      // Reset input fields and errors after a successful update\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      // Handle errors by updating the error state\n      setError(error.message);\n    }\n  };\n\n  // Use useEffect to sort conversations whenever conversations or selectedConversationId change\n  useEffect(() => {\n    // Sort conversations by last_updated timestamp in descending order\n    const sortedConversations = [...conversations].sort((a, b) => new Date(b.last_updated) - new Date(a.last_updated));\n\n    // Update the state with the sorted conversations\n    setConversations(sortedConversations);\n  }, [conversations, selectedConversationId]);\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = message => {\n    // Set the message text for editing and enable edit mode\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Render the application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: conversations.map(conv => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedConversationId(conv.id),\n          children: conv.name\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedConversation.messages.map(msg => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleEditMessage(msg),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: moment(msg.last_updated).format(\"LLL\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 19\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: editMode ? \"Edit\" : \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Display message if no conversation is selected\n      _jsxDEV(\"p\", {\n        children: \"Select a conversation to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4FEPt4katCo0ciy8UCJ4S0oD/+s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","jsonData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","conversations","setConversations","sampleData","selectedConversationId","setSelectedConversationId","newMessage","setNewMessage","editMode","setEditMode","editMessageId","setEditMessageId","error","setError","selectedConversation","find","conv","id","handleSendMessage","Error","trim","prevConversations","updatedConversations","map","updatedMessages","messages","msg","text","last_updated","toISOString","length","message","sortedConversations","sort","a","b","Date","handleEditMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","format","type","value","onChange","e","target","style","color","_c","$RefreshReg$"],"sources":["/Users/AZAAD/json-conversation-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/jsonData/chatHistory.json\";\n\nfunction App() {\n  // State variables\n  const [conversations, setConversations] = useState(sampleData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(\n    (conv) => conv.id === selectedConversationId\n  );\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      // Validate that a conversation is selected\n      if (!selectedConversationId) {\n        throw new Error(\"Please select a conversation.\");\n      }\n\n      // Validate that the message is not empty\n      if (newMessage.trim() === \"\") {\n        throw new Error(\"Message cannot be empty.\");\n      }\n\n      // Update conversations using the previous state\n      setConversations((prevConversations) => {\n        // Map over each conversation\n        const updatedConversations = prevConversations.map((conv) => {\n          // Check if the current conversation is the selected one\n          if (conv.id === selectedConversationId) {\n            // Update the messages for the selected conversation\n            const updatedMessages = editMode\n              ? conv.messages.map((msg) =>\n                  msg.id === editMessageId\n                    ? {\n                        ...msg,\n                        text: newMessage,\n                        last_updated: moment().toISOString(),\n                      }\n                    : msg\n                )\n              : [\n                  ...conv.messages,\n                  {\n                    id: conv.messages.length + 1,\n                    text: newMessage,\n                    last_updated: moment().toISOString(),\n                  },\n                ];\n\n            // Return the updated conversation with the new messages\n            return {\n              ...conv,\n              messages: updatedMessages,\n              last_updated: moment().toISOString(),\n            };\n          }\n          // If it's not the selected conversation, return the unchanged conversation\n          return conv;\n        });\n\n        // Return the updated conversations to setConversations\n        return updatedConversations;\n      });\n\n      // Reset input fields and errors after a successful update\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      // Handle errors by updating the error state\n      setError(error.message);\n    }\n  };\n\n  // Use useEffect to sort conversations whenever conversations or selectedConversationId change\n  useEffect(() => {\n    // Sort conversations by last_updated timestamp in descending order\n    const sortedConversations = [...conversations].sort(\n      (a, b) => new Date(b.last_updated) - new Date(a.last_updated)\n    );\n\n    // Update the state with the sorted conversations\n    setConversations(sortedConversations);\n  }, [conversations, selectedConversationId]);\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = (message) => {\n    // Set the message text for editing and enable edit mode\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Render the application\n  return (\n    <div className=\"App\">\n      {/* Left side: Conversation list */}\n      <div className=\"conversation-list\">\n        <h2>Conversations</h2>\n        <ul>\n          {/* Map over each conversation to display in the list */}\n          {conversations.map((conv) => (\n            <li\n              key={conv.id}\n              onClick={() => setSelectedConversationId(conv.id)}\n            >\n              {conv.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Right side: Messages */}\n      <div className=\"messages\">\n        <h2>Messages</h2>\n        {selectedConversation ? (\n          <>\n            {/* Display messages and reply section */}\n            <ul>\n              {/* Map over each message in the selected conversation to display in the list */}\n              {selectedConversation.messages.map((msg) => (\n                <li key={msg.id} onClick={() => handleEditMessage(msg)}>\n                  <p>{moment(msg.last_updated).format(\"LLL\")}</p>\n                  <p>{msg.text}</p>\n                </li>\n              ))}\n            </ul>\n            {/* Reply section with input field, button, and error display */}\n            <div className=\"reply-section\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n              />\n              <button onClick={handleSendMessage}>\n                {editMode ? \"Edit\" : \"Send\"}\n              </button>\n              {error && <p style={{ color: \"red\" }}>{error}</p>}\n            </div>\n          </>\n        ) : (\n          // Display message if no conversation is selected\n          <p>Select a conversation to view messages.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}