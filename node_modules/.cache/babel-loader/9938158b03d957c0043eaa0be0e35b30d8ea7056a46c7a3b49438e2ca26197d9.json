{"ast":null,"code":"var _jsxFileName = \"/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/data/chatHistory.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(conv => conv.id === selectedConversationId);\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = message => {\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversationId) throw new Error(\"Please select a conversation.\");\n      if (newMessage.trim() === \"\") throw new Error(\"Message cannot be empty.\");\n      setConversations(prevConversations => prevConversations.map(conv => conv.id === selectedConversationId ? {\n        ...conv,\n        messages: editMode ?\n        // If in edit mode, map over each message to update the selected message or leave others unchanged\n        conv.messages.map(msg => msg.id === editMessageId ? {\n          ...msg,\n          text: newMessage,\n          last_updated: moment().toISOString()\n        } : msg) :\n        // If not in edit mode, add a new message to the conversation\n        [...conv.messages, {\n          id: conv.messages.length + 1,\n          text: newMessage,\n          last_updated: moment().toISOString()\n        }],\n        last_updated: moment().toISOString() // Update the last_updated timestamp for the conversation\n      } : conv));\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // Use useEffect to sort conversations whenever conversations or selectedConversationId change\n  useEffect(() => {\n    // Sort conversations by last_updated timestamp in descending order\n    const sortedConversations = [...conversations].sort((a, b) => new Date(b.last_updated) - new Date(a.last_updated));\n    setConversations(sortedConversations);\n  }, [conversations, selectedConversationId]);\n\n  // Render the application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: conversations.map(conv => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => setSelectedConversationId(conv.id),\n          children: conv.name\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedConversation.messages.map(msg => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleEditMessage(msg),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: moment(msg.last_updated).format(\"LLL\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: editMode ? \"Edit\" : \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Display message if no conversation is selected\n      _jsxDEV(\"p\", {\n        children: \"Select a conversation to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wQsArqTBr+daysdJLd4FrlLjC+o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","jsonData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","conversations","setConversations","selectedConversationId","setSelectedConversationId","newMessage","setNewMessage","editMode","setEditMode","editMessageId","setEditMessageId","error","setError","selectedConversation","find","conv","id","handleEditMessage","message","text","handleSendMessage","Error","trim","prevConversations","map","messages","msg","last_updated","toISOString","length","sortedConversations","sort","a","b","Date","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","format","type","value","onChange","e","target","style","color","_c","$RefreshReg$"],"sources":["/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/data/chatHistory.json\";\n\nfunction App() {\n  // State variables\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(\n    (conv) => conv.id === selectedConversationId\n  );\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = (message) => {\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversationId)\n        throw new Error(\"Please select a conversation.\");\n      if (newMessage.trim() === \"\") throw new Error(\"Message cannot be empty.\");\n\n      setConversations((prevConversations) =>\n        prevConversations.map((conv) =>\n          conv.id === selectedConversationId\n            ? {\n                ...conv,\n                messages: editMode\n                  ? // If in edit mode, map over each message to update the selected message or leave others unchanged\n                    conv.messages.map((msg) =>\n                      msg.id === editMessageId\n                        ? {\n                            ...msg,\n                            text: newMessage,\n                            last_updated: moment().toISOString(),\n                          }\n                        : msg\n                    )\n                  : // If not in edit mode, add a new message to the conversation\n                    [\n                      ...conv.messages,\n                      {\n                        id: conv.messages.length + 1,\n                        text: newMessage,\n                        last_updated: moment().toISOString(),\n                      },\n                    ],\n                last_updated: moment().toISOString(), // Update the last_updated timestamp for the conversation\n              }\n            : conv\n        )\n      );\n\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // Use useEffect to sort conversations whenever conversations or selectedConversationId change\n  useEffect(() => {\n    // Sort conversations by last_updated timestamp in descending order\n    const sortedConversations = [...conversations].sort(\n      (a, b) => new Date(b.last_updated) - new Date(a.last_updated)\n    );\n    setConversations(sortedConversations);\n  }, [conversations, selectedConversationId]);\n\n  // Render the application\n  return (\n    <div className=\"App\">\n      {/* Left side: Conversation list */}\n      <div className=\"conversation-list\">\n        <h2>Conversations</h2>\n        <ul>\n          {/* Map over each conversation to display in the list */}\n          {conversations.map((conv) => (\n            <li\n              key={conv.id}\n              onClick={() => setSelectedConversationId(conv.id)}\n            >\n              {conv.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Right side: Messages */}\n      <div className=\"messages\">\n        <h2>Messages</h2>\n        {selectedConversation ? (\n          <>\n            {/* Display messages and reply section */}\n            <ul>\n              {/* Map over each message in the selected conversation to display in the list */}\n              {selectedConversation.messages.map((msg) => (\n                <li key={msg.id} onClick={() => handleEditMessage(msg)}>\n                  <p>{moment(msg.last_updated).format(\"LLL\")}</p>\n                  <p>{msg.text}</p>\n                </li>\n              ))}\n            </ul>\n            {/* Reply section with input field, button, and error display */}\n            <div className=\"reply-section\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n              />\n              <button onClick={handleSendMessage}>\n                {editMode ? \"Edit\" : \"Send\"}\n              </button>\n              {error && <p style={{ color: \"red\" }}>{error}</p>}\n            </div>\n          </>\n        ) : (\n          // Display message if no conversation is selected\n          <p>Select a conversation to view messages.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAO,WAAW;AAClB,OAAOC,QAAQ,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAACG,QAAQ,CAAC;EAC5D,MAAM,CAACS,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1E,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMsB,oBAAoB,GAAGZ,aAAa,CAACa,IAAI,CAC5CC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKb,sBACxB,CAAC;;EAED;EACA,MAAMc,iBAAiB,GAAIC,OAAO,IAAK;IACrCZ,aAAa,CAACY,OAAO,CAACC,IAAI,CAAC;IAC3BX,WAAW,CAAC,IAAI,CAAC;IACjBE,gBAAgB,CAACQ,OAAO,CAACF,EAAE,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAI;MACF,IAAI,CAACjB,sBAAsB,EACzB,MAAM,IAAIkB,KAAK,CAAC,+BAA+B,CAAC;MAClD,IAAIhB,UAAU,CAACiB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,MAAM,IAAID,KAAK,CAAC,0BAA0B,CAAC;MAEzEnB,gBAAgB,CAAEqB,iBAAiB,IACjCA,iBAAiB,CAACC,GAAG,CAAET,IAAI,IACzBA,IAAI,CAACC,EAAE,KAAKb,sBAAsB,GAC9B;QACE,GAAGY,IAAI;QACPU,QAAQ,EAAElB,QAAQ;QACd;QACAQ,IAAI,CAACU,QAAQ,CAACD,GAAG,CAAEE,GAAG,IACpBA,GAAG,CAACV,EAAE,KAAKP,aAAa,GACpB;UACE,GAAGiB,GAAG;UACNP,IAAI,EAAEd,UAAU;UAChBsB,YAAY,EAAElC,MAAM,CAAC,CAAC,CAACmC,WAAW,CAAC;QACrC,CAAC,GACDF,GACN,CAAC;QACD;QACA,CACE,GAAGX,IAAI,CAACU,QAAQ,EAChB;UACET,EAAE,EAAED,IAAI,CAACU,QAAQ,CAACI,MAAM,GAAG,CAAC;UAC5BV,IAAI,EAAEd,UAAU;UAChBsB,YAAY,EAAElC,MAAM,CAAC,CAAC,CAACmC,WAAW,CAAC;QACrC,CAAC,CACF;QACLD,YAAY,EAAElC,MAAM,CAAC,CAAC,CAACmC,WAAW,CAAC,CAAC,CAAE;MACxC,CAAC,GACDb,IACN,CACF,CAAC;MAEDT,aAAa,CAAC,EAAE,CAAC;MACjBE,WAAW,CAAC,KAAK,CAAC;MAClBE,gBAAgB,CAAC,IAAI,CAAC;MACtBE,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACO,OAAO,CAAC;IACzB;EACF,CAAC;;EAED;EACA1B,SAAS,CAAC,MAAM;IACd;IACA,MAAMsC,mBAAmB,GAAG,CAAC,GAAG7B,aAAa,CAAC,CAAC8B,IAAI,CACjD,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACN,YAAY,CAAC,GAAG,IAAIO,IAAI,CAACF,CAAC,CAACL,YAAY,CAC9D,CAAC;IACDzB,gBAAgB,CAAC4B,mBAAmB,CAAC;EACvC,CAAC,EAAE,CAAC7B,aAAa,EAAEE,sBAAsB,CAAC,CAAC;;EAE3C;EACA,oBACEP,OAAA;IAAKuC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAElBxC,OAAA;MAAKuC,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCxC,OAAA;QAAAwC,QAAA,EAAI;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtB5C,OAAA;QAAAwC,QAAA,EAEGnC,aAAa,CAACuB,GAAG,CAAET,IAAI,iBACtBnB,OAAA;UAEE6C,OAAO,EAAEA,CAAA,KAAMrC,yBAAyB,CAACW,IAAI,CAACC,EAAE,CAAE;UAAAoB,QAAA,EAEjDrB,IAAI,CAAC2B;QAAI,GAHL3B,IAAI,CAACC,EAAE;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAGN5C,OAAA;MAAKuC,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBxC,OAAA;QAAAwC,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAChB3B,oBAAoB,gBACnBjB,OAAA,CAAAE,SAAA;QAAAsC,QAAA,gBAEExC,OAAA;UAAAwC,QAAA,EAEGvB,oBAAoB,CAACY,QAAQ,CAACD,GAAG,CAAEE,GAAG,iBACrC9B,OAAA;YAAiB6C,OAAO,EAAEA,CAAA,KAAMxB,iBAAiB,CAACS,GAAG,CAAE;YAAAU,QAAA,gBACrDxC,OAAA;cAAAwC,QAAA,EAAI3C,MAAM,CAACiC,GAAG,CAACC,YAAY,CAAC,CAACgB,MAAM,CAAC,KAAK;YAAC;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/C5C,OAAA;cAAAwC,QAAA,EAAIV,GAAG,CAACP;YAAI;cAAAkB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA,GAFVd,GAAG,CAACV,EAAE;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGX,CACL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC,eAEL5C,OAAA;UAAKuC,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC5BxC,OAAA;YACEgD,IAAI,EAAC,MAAM;YACXC,KAAK,EAAExC,UAAW;YAClByC,QAAQ,EAAGC,CAAC,IAAKzC,aAAa,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChD,CAAC,eACF5C,OAAA;YAAQ6C,OAAO,EAAErB,iBAAkB;YAAAgB,QAAA,EAChC7B,QAAQ,GAAG,MAAM,GAAG;UAAM;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrB,CAAC,EACR7B,KAAK,iBAAIf,OAAA;YAAGqD,KAAK,EAAE;cAAEC,KAAK,EAAE;YAAM,CAAE;YAAAd,QAAA,EAAEzB;UAAK;YAAA0B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC;MAAA,eACN,CAAC;MAAA;MAEH;MACA5C,OAAA;QAAAwC,QAAA,EAAG;MAAuC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC9C;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxC,EAAA,CAnIQD,GAAG;AAAAoD,EAAA,GAAHpD,GAAG;AAqIZ,eAAeA,GAAG;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}