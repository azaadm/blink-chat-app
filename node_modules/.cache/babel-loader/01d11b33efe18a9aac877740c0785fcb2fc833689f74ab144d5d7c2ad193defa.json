{"ast":null,"code":"var _jsxFileName = \"/Users/AZAAD/json-conversation-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\"; // Import the CSS file for styling\nimport jsonData from \"../src/jsonData/chatHistory.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables for managing application state\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Function to handle clicking on a conversation\n  const handleConversationClick = conversation => {\n    // Set the selected conversation and reset state for new messages or edits\n    setSelectedConversation(conversation);\n    setEditMode(false);\n    setEditMessageId(null);\n    setNewMessage(\"\");\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversation) {\n        // Throw an error if no conversation is selected\n        throw new Error(\"Please select a conversation.\");\n      }\n      if (newMessage.trim() === \"\") {\n        // Throw an error if the message is empty\n        throw new Error(\"Message cannot be empty.\");\n      }\n\n      // Update conversations based on whether it's a new message or an edit\n      const updatedConversations = conversations.map(conv => {\n        if (conv.id === selectedConversation.id) {\n          return {\n            ...conv,\n            messages: editMode ? conv.messages.map(msg => msg.id === editMessageId ? {\n              ...msg,\n              text: newMessage,\n              last_updated: moment().toISOString()\n            } : msg) : [...conv.messages, {\n              id: conv.messages.length + 1,\n              text: newMessage,\n              last_updated: moment().toISOString()\n            }]\n          };\n        }\n        return conv;\n      });\n\n      // Update state with the new conversations, reset input fields and errors\n      setConversations(updatedConversations);\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      // Catch and handle errors, update the error state\n      setError(error.message);\n    }\n  };\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = message => {\n    // Set the message text for editing and enable edit mode\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Sort conversations by last_updated timestamp in descending order\n  const sortedConversations = conversations.sort((a, b) => new Date(b.last_updated) - new Date(a.last_updated));\n\n  // Sort messages by last_updated timestamp in ascending order\n  const sortedMessages = selectedConversation && selectedConversation.messages.sort((a, b) => new Date(a.last_updated) - new Date(b.last_updated));\n\n  // Render the application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: sortedConversations.map(conv =>\n        /*#__PURE__*/\n        // Display each conversation in the list\n        _jsxDEV(\"li\", {\n          onClick: () => handleConversationClick(conv),\n          children: conv.name\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: sortedMessages.map(msg =>\n          /*#__PURE__*/\n          // Display each message in the list, enable editing on click\n          _jsxDEV(\"li\", {\n            onClick: () => handleEditMessage(msg),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: moment(msg.last_updated).format(\"LLL\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: editMode ? \"Edit\" : \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Display message if no conversation is selected\n      _jsxDEV(\"p\", {\n        children: \"Select a conversation to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mxjovZ5sIrczmCtnbvDr3gfb4co=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","moment","jsonData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","conversations","setConversations","selectedConversation","setSelectedConversation","newMessage","setNewMessage","editMode","setEditMode","editMessageId","setEditMessageId","error","setError","handleConversationClick","conversation","handleSendMessage","Error","trim","updatedConversations","map","conv","id","messages","msg","text","last_updated","toISOString","length","message","handleEditMessage","sortedConversations","sort","a","b","Date","sortedMessages","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","format","type","value","onChange","e","target","style","color","_c","$RefreshReg$"],"sources":["/Users/AZAAD/json-conversation-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\"; // Import the CSS file for styling\nimport jsonData from \"../src/jsonData/chatHistory.json\";\n\nfunction App() {\n  // State variables for managing application state\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversation, setSelectedConversation] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Function to handle clicking on a conversation\n  const handleConversationClick = (conversation) => {\n    // Set the selected conversation and reset state for new messages or edits\n    setSelectedConversation(conversation);\n    setEditMode(false);\n    setEditMessageId(null);\n    setNewMessage(\"\");\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversation) {\n        // Throw an error if no conversation is selected\n        throw new Error(\"Please select a conversation.\");\n      }\n\n      if (newMessage.trim() === \"\") {\n        // Throw an error if the message is empty\n        throw new Error(\"Message cannot be empty.\");\n      }\n\n      // Update conversations based on whether it's a new message or an edit\n      const updatedConversations = conversations.map((conv) => {\n        if (conv.id === selectedConversation.id) {\n          return {\n            ...conv,\n            messages: editMode\n              ? conv.messages.map((msg) =>\n                  msg.id === editMessageId\n                    ? {\n                        ...msg,\n                        text: newMessage,\n                        last_updated: moment().toISOString(),\n                      }\n                    : msg\n                )\n              : [\n                  ...conv.messages,\n                  {\n                    id: conv.messages.length + 1,\n                    text: newMessage,\n                    last_updated: moment().toISOString(),\n                  },\n                ],\n          };\n        }\n        return conv;\n      });\n\n      // Update state with the new conversations, reset input fields and errors\n      setConversations(updatedConversations);\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      // Catch and handle errors, update the error state\n      setError(error.message);\n    }\n  };\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = (message) => {\n    // Set the message text for editing and enable edit mode\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Sort conversations by last_updated timestamp in descending order\n  const sortedConversations = conversations.sort(\n    (a, b) => new Date(b.last_updated) - new Date(a.last_updated)\n  );\n\n  // Sort messages by last_updated timestamp in ascending order\n  const sortedMessages =\n    selectedConversation &&\n    selectedConversation.messages.sort(\n      (a, b) => new Date(a.last_updated) - new Date(b.last_updated)\n    );\n\n  // Render the application\n  return (\n    <div className=\"App\">\n      {/* Left side: Conversation list */}\n      <div className=\"conversation-list\">\n        <h2>Conversations</h2>\n        <ul>\n          {sortedConversations.map((conv) => (\n            // Display each conversation in the list\n            <li key={conv.id} onClick={() => handleConversationClick(conv)}>\n              {conv.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Right side: Messages */}\n      <div className=\"messages\">\n        <h2>Messages</h2>\n        {selectedConversation ? (\n          <>\n            {/* Display messages and reply section */}\n            <ul>\n              {sortedMessages.map((msg) => (\n                // Display each message in the list, enable editing on click\n                <li key={msg.id} onClick={() => handleEditMessage(msg)}>\n                  <p>{moment(msg.last_updated).format(\"LLL\")}</p>\n                  <p>{msg.text}</p>\n                </li>\n              ))}\n            </ul>\n            <div className=\"reply-section\">\n              {/* Input field for new message */}\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n              />\n              {/* Send or Edit button */}\n              <button onClick={handleSendMessage}>\n                {editMode ? \"Edit\" : \"Send\"}\n              </button>\n              {/* Display error message if any */}\n              {error && <p style={{ color: \"red\" }}>{error}</p>}\n            </div>\n          </>\n        ) : (\n          // Display message if no conversation is selected\n          <p>Select a conversation to view messages.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}