{"ast":null,"code":"var _jsxFileName = \"/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/data/chatHistory.json\";\nimport { Form } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State variables\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(conv => conv.id === selectedConversationId);\n\n  // Function to handle clicking on a message for editing\n  const handleSelectedConversation = conv => {\n    console.log(\"Selected Conversation:\", conv);\n    setSelectedConversationId(conv.id);\n    setNewMessage(\"\");\n    setEditMode(false);\n    console.log(conv.last_updated);\n  };\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = message => {\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversationId) throw new Error(\"Please select a conversation.\");\n      if (newMessage.trim() === \"\") throw new Error(\"Message cannot be empty.\");\n      setConversations(prevConversations => prevConversations.map(conv => conv.id === selectedConversationId ? {\n        ...conv,\n        messages: editMode ?\n        // If in edit mode, map over each message to update the selected message or leave others unchanged\n        conv.messages.map(msg => msg.id === editMessageId ? {\n          ...msg,\n          text: newMessage,\n          last_updated: moment().toISOString()\n        } : msg) :\n        // If not in edit mode, add a new message to the conversation\n        [...conv.messages, {\n          id: conv.messages.length + 1,\n          text: newMessage,\n          last_updated: moment().toISOString()\n        }],\n        last_updated: moment().toISOString() // Update the last_updated timestamp for the conversation\n      } : conv));\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   setConversations((prevConversations) => {\n  //     const sortedConversations = [...prevConversations].sort(\n  //       (a, b) => new Date(b.last_updated) - new Date(a.last_updated)\n  //     );\n  //     return sortedConversations;\n  //   });\n  // }, [conversations]);\n\n  // Render the application\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Conversations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: conversations.map(conv => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelectedConversation(conv),\n          children: conv.name\n        }, conv.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), selectedConversation ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedConversation.messages.map(msg => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleEditMessage(msg),\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: moment(msg.last_updated).format(\"LLL\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this)]\n          }, msg.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"reply-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"New Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSendMessage,\n            children: editMode ? \"Edit\" : \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\"\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) :\n      /*#__PURE__*/\n      // Display message if no conversation is selected\n      _jsxDEV(\"p\", {\n        children: \"Select a conversation to view messages.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CHIN0piDGX3mL12hofin+2CM+14=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","moment","jsonData","Form","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","conversations","setConversations","selectedConversationId","setSelectedConversationId","newMessage","setNewMessage","editMode","setEditMode","editMessageId","setEditMessageId","error","setError","selectedConversation","find","conv","id","handleSelectedConversation","console","log","last_updated","handleEditMessage","message","text","handleSendMessage","Error","trim","prevConversations","map","messages","msg","toISOString","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","format","type","value","onChange","e","target","placeholder","style","color","_c","$RefreshReg$"],"sources":["/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport \"./App.css\";\nimport jsonData from \"../src/data/chatHistory.json\";\nimport { Form } from \"react\";\n\nfunction App() {\n  // State variables\n  const [conversations, setConversations] = useState(jsonData);\n  const [selectedConversationId, setSelectedConversationId] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const [editMessageId, setEditMessageId] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Find the selected conversation based on its ID\n  const selectedConversation = conversations.find(\n    (conv) => conv.id === selectedConversationId\n  );\n\n  // Function to handle clicking on a message for editing\n  const handleSelectedConversation = (conv) => {\n    console.log(\"Selected Conversation:\", conv);\n    setSelectedConversationId(conv.id);\n    setNewMessage(\"\");\n    setEditMode(false);\n    console.log(conv.last_updated);\n  };\n\n  // Function to handle clicking on a message for editing\n  const handleEditMessage = (message) => {\n    setNewMessage(message.text);\n    setEditMode(true);\n    setEditMessageId(message.id);\n  };\n\n  // Function to handle sending or editing a message\n  const handleSendMessage = () => {\n    try {\n      if (!selectedConversationId)\n        throw new Error(\"Please select a conversation.\");\n      if (newMessage.trim() === \"\") throw new Error(\"Message cannot be empty.\");\n\n      setConversations((prevConversations) =>\n        prevConversations.map((conv) =>\n          conv.id === selectedConversationId\n            ? {\n                ...conv,\n                messages: editMode\n                  ? // If in edit mode, map over each message to update the selected message or leave others unchanged\n                    conv.messages.map((msg) =>\n                      msg.id === editMessageId\n                        ? {\n                            ...msg,\n                            text: newMessage,\n                            last_updated: moment().toISOString(),\n                          }\n                        : msg\n                    )\n                  : // If not in edit mode, add a new message to the conversation\n                    [\n                      ...conv.messages,\n                      {\n                        id: conv.messages.length + 1,\n                        text: newMessage,\n                        last_updated: moment().toISOString(),\n                      },\n                    ],\n                last_updated: moment().toISOString(), // Update the last_updated timestamp for the conversation\n              }\n            : conv\n        )\n      );\n\n      setNewMessage(\"\");\n      setEditMode(false);\n      setEditMessageId(null);\n      setError(\"\");\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // useEffect(() => {\n  //   setConversations((prevConversations) => {\n  //     const sortedConversations = [...prevConversations].sort(\n  //       (a, b) => new Date(b.last_updated) - new Date(a.last_updated)\n  //     );\n  //     return sortedConversations;\n  //   });\n  // }, [conversations]);\n\n  // Render the application\n  return (\n    <div className=\"App\">\n      {/* Left side: Conversation list */}\n      <div className=\"conversation-list\">\n        <h2>Conversations</h2>\n        <ul>\n          {/* Map over each conversation to display in the list */}\n          {conversations.map((conv) => (\n            <li key={conv.id} onClick={() => handleSelectedConversation(conv)}>\n              {conv.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Right side: Messages */}\n      <div className=\"messages\">\n        <h2>Messages</h2>\n        {selectedConversation ? (\n          <>\n            {/* Display messages and reply section */}\n            <ul>\n              {/* Map over each message in the selected conversation to display in the list */}\n              {selectedConversation.messages.map((msg) => (\n                <li key={msg.id} onClick={() => handleEditMessage(msg)}>\n                  <p>{moment(msg.last_updated).format(\"LLL\")}</p>\n                  <p>{msg.text}</p>\n                </li>\n              ))}\n            </ul>\n            {/* Reply section with input field, button, and error display */}\n            <div className=\"reply-section\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                placeholder=\"New Message\"\n              />\n              <button onClick={handleSendMessage}>\n                {editMode ? \"Edit\" : \"Send\"}\n              </button>\n              {error && <p style={{ color: \"red\" }}>{error}</p>}\n            </div>\n          </>\n        ) : (\n          // Display message if no conversation is selected\n          <p>Select a conversation to view messages.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}