{"ast":null,"code":"var _jsxFileName = \"/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js\";\nimport React from \"react\";\nimport { render, fireEvent, act } from \"@testing-library/react\";\nimport App from \"./App\";\n\n// Mocked data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockedData = [{\n  id: 1,\n  name: \"Conversation 1\",\n  last_updated: \"2023-01-01T12:00:00Z\",\n  messages: [{\n    id: 1,\n    text: \"Hello\",\n    last_updated: \"2023-01-01T12:01:00Z\"\n  }, {\n    id: 2,\n    text: \"Hi\",\n    last_updated: \"2023-01-01T12:02:00Z\"\n  }]\n}\n// Add more mock conversations as needed\n];\n\n// Mock the moment library to fix timestamps for testing\njest.mock(\"moment\", () => () => ({\n  format: () => \"mocked-date\"\n}));\ndescribe(\"App Component\", () => {\n  test(\"renders App component\", () => {\n    render( /*#__PURE__*/_jsxDEV(App, {\n      jsonData: mockedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this));\n  });\n  test(\"displays conversation list\", () => {\n    const {\n      getByText\n    } = render( /*#__PURE__*/_jsxDEV(App, {\n      jsonData: mockedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 34\n    }, this));\n    const conversation = getByText(\"Conversations\");\n    expect(conversation).toBeInTheDocument();\n  });\n  test(\"selects a conversation and displays messages\", () => {\n    const {\n      getByText\n    } = render( /*#__PURE__*/_jsxDEV(App, {\n      jsonData: mockedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 34\n    }, this));\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n    const message1 = getByText(\"Hello\");\n    const message2 = getByText(\"Hi\");\n    expect(message1).toBeInTheDocument();\n    expect(message2).toBeInTheDocument();\n  });\n  test(\"sends a new message\", () => {\n    const {\n      getByText,\n      getByLabelText\n    } = render( /*#__PURE__*/_jsxDEV(App, {\n      jsonData: mockedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 50\n    }, this));\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n    const inputField = getByLabelText(\"Reply Input\");\n    const sendButton = getByText(\"Send\");\n    fireEvent.change(inputField, {\n      target: {\n        value: \"New message\"\n      }\n    });\n    fireEvent.click(sendButton);\n    const newMessage = getByText(\"New message\");\n    expect(newMessage).toBeInTheDocument();\n  });\n  test(\"edits an existing message\", () => {\n    const {\n      getByText,\n      getByLabelText\n    } = render( /*#__PURE__*/_jsxDEV(App, {\n      jsonData: mockedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 50\n    }, this));\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n    const editButton = getByText(\"Edit\");\n    fireEvent.click(editButton);\n    const inputField = getByLabelText(\"Reply Input\");\n    const editButtonAfterEdit = getByText(\"Edit\");\n    fireEvent.change(inputField, {\n      target: {\n        value: \"Edited message\"\n      }\n    });\n    fireEvent.click(editButtonAfterEdit);\n    const editedMessage = getByText(\"Edited message\");\n    expect(editedMessage).toBeInTheDocument();\n  });\n});","map":{"version":3,"names":["React","render","fireEvent","act","App","jsxDEV","_jsxDEV","mockedData","id","name","last_updated","messages","text","jest","mock","format","describe","test","jsonData","fileName","_jsxFileName","lineNumber","columnNumber","getByText","conversation","expect","toBeInTheDocument","conversationItem","click","message1","message2","getByLabelText","inputField","sendButton","change","target","value","newMessage","editButton","editButtonAfterEdit","editedMessage"],"sources":["/Users/AZAAD/Documents/GitHub/blink-take-home-test/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { render, fireEvent, act } from \"@testing-library/react\";\nimport App from \"./App\";\n\n// Mocked data\nconst mockedData = [\n  {\n    id: 1,\n    name: \"Conversation 1\",\n    last_updated: \"2023-01-01T12:00:00Z\",\n    messages: [\n      { id: 1, text: \"Hello\", last_updated: \"2023-01-01T12:01:00Z\" },\n      { id: 2, text: \"Hi\", last_updated: \"2023-01-01T12:02:00Z\" },\n    ],\n  },\n  // Add more mock conversations as needed\n];\n\n// Mock the moment library to fix timestamps for testing\njest.mock(\"moment\", () => () => ({ format: () => \"mocked-date\" }));\n\ndescribe(\"App Component\", () => {\n  test(\"renders App component\", () => {\n    render(<App jsonData={mockedData} />);\n  });\n\n  test(\"displays conversation list\", () => {\n    const { getByText } = render(<App jsonData={mockedData} />);\n    const conversation = getByText(\"Conversations\");\n    expect(conversation).toBeInTheDocument();\n  });\n\n  test(\"selects a conversation and displays messages\", () => {\n    const { getByText } = render(<App jsonData={mockedData} />);\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n\n    const message1 = getByText(\"Hello\");\n    const message2 = getByText(\"Hi\");\n\n    expect(message1).toBeInTheDocument();\n    expect(message2).toBeInTheDocument();\n  });\n\n  test(\"sends a new message\", () => {\n    const { getByText, getByLabelText } = render(<App jsonData={mockedData} />);\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n\n    const inputField = getByLabelText(\"Reply Input\");\n    const sendButton = getByText(\"Send\");\n\n    fireEvent.change(inputField, { target: { value: \"New message\" } });\n    fireEvent.click(sendButton);\n\n    const newMessage = getByText(\"New message\");\n    expect(newMessage).toBeInTheDocument();\n  });\n\n  test(\"edits an existing message\", () => {\n    const { getByText, getByLabelText } = render(<App jsonData={mockedData} />);\n    const conversationItem = getByText(\"Conversation 1\");\n    fireEvent.click(conversationItem);\n\n    const editButton = getByText(\"Edit\");\n    fireEvent.click(editButton);\n\n    const inputField = getByLabelText(\"Reply Input\");\n    const editButtonAfterEdit = getByText(\"Edit\");\n\n    fireEvent.change(inputField, { target: { value: \"Edited message\" } });\n    fireEvent.click(editButtonAfterEdit);\n\n    const editedMessage = getByText(\"Edited message\");\n    expect(editedMessage).toBeInTheDocument();\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}